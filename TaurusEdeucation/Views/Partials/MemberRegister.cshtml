@model TaurusEdeucation.Models.MemberRegisterModel

@{
    using (Html.BeginUmbracoForm<TaurusEdeucation.Controllers.MemberRegisterSurfaceController>(nameof(TaurusEdeucation.Controllers.MemberRegisterSurfaceController.MemberSubmit),
           FormMethod.Post, new { id = "RegisterForm" }))
    {
        @Html.AntiForgeryToken()
        <div class="mb-3">
            @Html.LabelFor(m => m.FirstName, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.SurName, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.SurName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.SurName, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.Street, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.Street, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Street, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.City, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.City, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.Phone, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.Email, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.Password, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.Password, new { type = "password", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.PasswordCheck, new { @class = "form-label" })
            <div class="input-group">
                @Html.TextBoxFor(m => m.PasswordCheck, new { type = "password", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PasswordCheck, "", new { @class = "field-validation-error-input" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.Levels)
            <div class="input-group">
                @Html.DropDownListFor(m => Model.Levels[0], Model.LevelList.List, new
            {
                changed = false,
                style = "visibility: visible",
                @data_order = 0,
                @class = "form-select select-placeholder level-selector"
            })

                @Html.DropDownListFor(m => Model.Lessons[0], new List<SelectListItem>(), new
                {
                    changed = false,
                    onchange = "NextLesson(this)",
                    style = "visibility: visible",
                    @data_order = 0,
                    @class = "form-select select-placeholder"
                })

                @for (int i = 1; i <= 10; i++)
                {
                    <div>
                        @Html.DropDownListFor(m => Model.Levels[i], Model.LevelList.List, new
                        {
                            @changed = false,
                            style = "display: none",
                            @data_order = i,
                            @class = "form-select select-placeholder level-selector"
                        })

                        @Html.DropDownListFor(m => Model.Lessons[i], new List<SelectListItem>(), new
                        {
                            changed = false,
                            onchange = "NextLesson(this)",
                            style = "display: none",
                            @data_order = i,
                            @class = "form-select select-placeholder"
                        })
                    </div>
                }
                @Html.ValidationMessageFor(m => m.Lessons, "", new { @class = "field-validation-error-input" })
            </div>
        </div>



        <div class="taurus-newlector-conditions">
            Souhlasím se <span id="conditionLink" class="taurus-newlector-conditions-link">Smluvními podmínkami</span>
            @Html.CheckBoxFor(m => m.AgreedToTerms)
            @Html.ValidationMessageFor(m => m.AgreedToTerms)
        </div>

        @Html.HiddenFor(m => m.Kraj)
        @Html.HiddenFor(m => m.Okres)

        <input class="taurus-newlector-submit" type="submit" value="Registruj" />

    }

    var tempValueObject = TempData["RegistrationStatus"];
    var success = TempData["Success"];

    if (tempValueObject != null)
    {
        <div id="lektor-registration-error" class="field-validation-error taurus-newlector-registrationstatus"
             data-success="@success">
            @tempValueObject
        </div>
    }
}

@Html.Partial("~/Views/Partials/Shared/ModalWindow.cshtml")

<script>
    $('#conditionLink').on('click', function () {
        // funkce pro otevření okna s podmínkami
        $.getJSON('/Umbraco/Api/Conditions/GetConditions', function (result) {
            var conditionsDiv = document.getElementById("modal-content");

            conditionsDiv.innerHTML = result;
        });

        var modal = document.getElementById("modal-window");

        modal.style.display = "block";

    });

    $(document).ready(function () {
        $.ajax({
            url: '/Umbraco/Api/SablonyApi/GetSablona',
            type: 'GET',
            data: {
                typSablonyString: 'UspesnaRegistraceLektora'
            },
            cache: false,
            success: function (result) {
                alert(result);
            }
        });
    });
</script>

@*$.ajax({
        url: '/Umbraco/Api/MemberProfileEditApi/CheckPoznamka',
        type: 'GET',
        cache: false,
        success: function (result) {
            if (result === null) {
                return;
            }

            var data = JSON.parse(result.Data);

            var contentDiv = document.getElementById('modal-content')
            contentDiv.innerHTML = data;
            var modal = document.getElementById('modal-window');
            modal.style.display = 'block';
        }
    });*@